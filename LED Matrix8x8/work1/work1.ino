#include <MaxMatrix.h>
#include <avr /pgmspace.h>

const unsigned char CH1[] = {
  8, 8, B11000000, B10000000, B00000000, B11000000, B11000001, B10000000, B10000000, B00000000 // 1
};
const unsigned char CH2[] = {
  8, 8, B11000000, B10000000, B00000000, B11000001, B11000011, B10000001, B10000000, B00000000 // 2
};
const unsigned char CH3[] = {
  8, 8, B11000000, B10000000, B00000010, B11000110, B11000010, B10000000, B10000000, B00000000 // 3
};
const unsigned char CH4[] = {
  8, 8, B11000000, B10001000, B00011100, B11000000, B11000001, B10000001, B10000000, B00000000 // 4
};
const unsigned char CH5[] = {
  8, 8, B11000000, B10010000, B00111000, B11000000, B11000010, B10000011, B10000000, B00000000 // 5
};
const unsigned char CH6[] = {
  8, 8, B11000000, B10100000, B01110000, B11000000, B11000100, B10000111, B10000000, B00000000 // 6
};
const unsigned char CH7[] = {
  8, 8, B11000000, B11000000, B11100000, B11000000, B11000100, B10000100, B10001100, B00000000 // 7
};
const unsigned char CH8[] = {
  8, 8, B11000000, B11000000, B11100000, B11000000, B11001000, B10001000, B10011000, B00000000 // 8
};
const unsigned char CH9[] = {
  8, 8, B11000000, B11000000, B11100000, B11000000, B11000000, B10010000, B10010000, B00110000 // 9
};
const unsigned char CH10[] = {
  8, 8, B11000000, B11000000, B11100000, B11000000, B11000000, B11000000, B11000000, B11000000 // 10
};
const unsigned char CHx1[] = {
  8, 8, B11000000, B11000000, B11100000, B11000000, B11000000, B11000000, B11000000, B11000000 // x1
};
const unsigned char CHx2[] = {
  8, 8, B00000000, B00000000, B00100000, B00000000, B00000000, B00000000, B00000000, B00000000 // x2
};
const unsigned char CHl2[] = {
  8, 8, B00000000, B00000000, B01000000, B00000000, B00000000, B00000000, B00000000, B00000000 // l2
};
const unsigned char CHl1[] = {
  8, 8, B00000000, B00000000, B10000000, B00000000, B00000000, B00000000, B00000000, B00000000 // l1
};

PROGMEM const unsigned char CH[] = {
3, 8, B0000000, B0000000, B0000000, B0000000, B0000000, // space
1, 8, B1011111, B0000000, B0000000, B0000000, B0000000, // !
3, 8, B0000011, B0000000, B0000011, B0000000, B0000000, // "
5, 8, B0010100, B0111110, B0010100, B0111110, B0010100, // #
4, 8, B0100100, B1101010, B0101011, B0010010, B0000000, // $
5, 8, B1100011, B0010011, B0001000, B1100100, B1100011, // %
5, 8, B0110110, B1001001, B1010110, B0100000, B1010000, // &
1, 8, B0000011, B0000000, B0000000, B0000000, B0000000, // '
3, 8, B0011100, B0100010, B1000001, B0000000, B0000000, // (
3, 8, B1000001, B0100010, B0011100, B0000000, B0000000, // )
5, 8, B0101000, B0011000, B0001110, B0011000, B0101000, // *
5, 8, B0001000, B0001000, B0111110, B0001000, B0001000, // +
2, 8, B10110000, B1110000, B0000000, B0000000, B0000000, // ,
4, 8, B0001000, B0001000, B0001000, B0001000, B0000000, // -
2, 8, B1100000, B1100000, B0000000, B0000000, B0000000, // .
4, 8, B1100000, B0011000, B0000110, B0000001, B0000000, // /
4, 8, B0111110, B1000001, B1000001, B0111110, B0000000, // 0
3, 8, B1000010, B1111111, B1000000, B0000000, B0000000, // 1
4, 8, B1100010, B1010001, B1001001, B1000110, B0000000, // 2
4, 8, B0100010, B1000001, B1001001, B0110110, B0000000, // 3
4, 8, B0011000, B0010100, B0010010, B1111111, B0000000, // 4
4, 8, B0100111, B1000101, B1000101, B0111001, B0000000, // 5
4, 8, B0111110, B1001001, B1001001, B0110000, B0000000, // 6
4, 8, B1100001, B0010001, B0001001, B0000111, B0000000, // 7
4, 8, B0110110, B1001001, B1001001, B0110110, B0000000, // 8
4, 8, B0000110, B1001001, B1001001, B0111110, B0000000, // 9
2, 8, B01010000, B0000000, B0000000, B0000000, B0000000, // :
2, 8, B10000000, B01010000, B0000000, B0000000, B0000000, // ;
3, 8, B0010000, B0101000, B1000100, B0000000, B0000000, // < 
3, 8, B0010100, B0010100, B0010100, B0000000, B0000000, // =
3, 8, B1000100, B0101000, B0010000, B0000000, B0000000, // >
4, 8, B0000010, B1011001, B0001001, B0000110, B0000000, // ?
5, 8, B0111110, B1001001, B1010101, B1011101, B0001110, // @
4, 8, B1111110, B0010001, B0010001, B1111110, B0000000, // A
4, 8, B1111111, B1001001, B1001001, B0110110, B0000000, // B
4, 8, B0111110, B1000001, B1000001, B0100010, B0000000, // C
4, 8, B1111111, B1000001, B1000001, B0111110, B0000000, // D
4, 8, B1111111, B1001001, B1001001, B1000001, B0000000, // E
4, 8, B1111111, B0001001, B0001001, B0000001, B0000000, // F
4, 8, B0111110, B1000001, B1001001, B1111010, B0000000, // G
4, 8, B1111111, B0001000, B0001000, B1111111, B0000000, // H
3, 8, B1000001, B1111111, B1000001, B0000000, B0000000, // I
4, 8, B0110000, B1000000, B1000001, B0111111, B0000000, // J
4, 8, B1111111, B0001000, B0010100, B1100011, B0000000, // K
4, 8, B1111111, B1000000, B1000000, B1000000, B0000000, // L
5, 8, B1111111, B0000010, B0001100, B0000010, B1111111, // M
5, 8, B1111111, B0000100, B0001000, B0010000, B1111111, // N
4, 8, B0111110, B1000001, B1000001, B0111110, B0000000, // O
4, 8, B1111111, B0001001, B0001001, B0000110, B0000000, // P
4, 8, B0111110, B1000001, B1000001, B10111110, B0000000, // Q
4, 8, B1111111, B0001001, B0001001, B1110110, B0000000, // R
4, 8, B1000110, B1001001, B1001001, B0110010, B0000000, // S
5, 8, B0000001, B0000001, B1111111, B0000001, B0000001, // T
4, 8, B0111111, B1000000, B1000000, B0111111, B0000000, // U
5, 8, B0001111, B0110000, B1000000, B0110000, B0001111, // V
5, 8, B0111111, B1000000, B0111000, B1000000, B0111111, // W
5, 8, B1100011, B0010100, B0001000, B0010100, B1100011, // X
5, 8, B0000111, B0001000, B1110000, B0001000, B0000111, // Y
4, 8, B1100001, B1010001, B1001001, B1000111, B0000000, // Z
2, 8, B1111111, B1000001, B0000000, B0000000, B0000000, // [
4, 8, B0000001, B0000110, B0011000, B1100000, B0000000, // backslash
2, 8, B1000001, B1111111, B0000000, B0000000, B0000000, // ]
3, 8, B0000010, B0000001, B0000010, B0000000, B0000000, // hat
4, 8, B1000000, B1000000, B1000000, B1000000, B0000000, // _
2, 8, B0000001, B0000010, B0000000, B0000000, B0000000, // `
4, 8, B0100000, B1010100, B1010100, B1111000, B0000000, // a
4, 8, B1111111, B1000100, B1000100, B0111000, B0000000, // b
4, 8, B0111000, B1000100, B1000100, B0101000, B0000000, // c
4, 8, B0111000, B1000100, B1000100, B1111111, B0000000, // d
4, 8, B0111000, B1010100, B1010100, B0011000, B0000000, // e
3, 8, B0000100, B1111110, B0000101, B0000000, B0000000, // f
4, 8, B10011000, B10100100, B10100100, B01111000, B0000000, // g
4, 8, B1111111, B0000100, B0000100, B1111000, B0000000, // h
3, 8, B1000100, B1111101, B1000000, B0000000, B0000000, // i
4, 8, B1000000, B10000000, B10000100, B1111101, B0000000, // j
4, 8, B1111111, B0010000, B0101000, B1000100, B0000000, // k
3, 8, B1000001, B1111111, B1000000, B0000000, B0000000, // l
5, 8, B1111100, B0000100, B1111100, B0000100, B1111000, // m
4, 8, B1111100, B0000100, B0000100, B1111000, B0000000, // n
4, 8, B0111000, B1000100, B1000100, B0111000, B0000000, // o
4, 8, B11111100, B0100100, B0100100, B0011000, B0000000, // p
4, 8, B0011000, B0100100, B0100100, B11111100, B0000000, // q
4, 8, B1111100, B0001000, B0000100, B0000100, B0000000, // r
4, 8, B1001000, B1010100, B1010100, B0100100, B0000000, // s
3, 8, B0000100, B0111111, B1000100, B0000000, B0000000, // t
4, 8, B0111100, B1000000, B1000000, B1111100, B0000000, // u
5, 8, B0011100, B0100000, B1000000, B0100000, B0011100, // v
5, 8, B0111100, B1000000, B0111100, B1000000, B0111100, // w
5, 8, B1000100, B0101000, B0010000, B0101000, B1000100, // x
4, 8, B10011100, B10100000, B10100000, B1111100, B0000000, // y
3, 8, B1100100, B1010100, B1001100, B0000000, B0000000, // z
3, 8, B0001000, B0110110, B1000001, B0000000, B0000000, // {
1, 8, B1111111, B0000000, B0000000, B0000000, B0000000, // |
3, 8, B1000001, B0110110, B0001000, B0000000, B0000000, // }
4, 8, B0001000, B0000100, B0001000, B0000100, B0000000, // ~
};

const unsigned char C1[] = {
  8, 8, B10001000, B01000100, B00100100, B00111101, B00101111, B11001011, B10010000, B00000000, // 
};
const unsigned char C2[] = {
  8, 8, B00000000, B11011000, B01100101, B00111111, B11001011, B10010000, B00000000, B00000000, // 
};


const byte DATA = 11;  
const byte CS= 10;  
const byte CLK = 13;  
const byte maxInUse = 4;   
MaxMatrix m(DATA, CS, CLK, maxInUse);
byte buffer[10];
char msg[] = "You win ! Weiwen.love  ";
int w=0,s=0;

void setup()
{
  m.init();        
}

void loop()
{
  if(w==0){
   m.setIntensity(8); 
   m.writeSprite(0,0,CH1);
   delay(500);
   m.writeSprite(0,0,CH2);
   delay(500);
   m.writeSprite(0,0,CH3);
   delay(500);
   m.writeSprite(0,0,CH4);
   delay(500);
   m.writeSprite(0,0,CH5);
   delay(500);
   m.writeSprite(0,0,CH6);
   delay(500);
   m.writeSprite(0,0,CH7);
   delay(500);
   m.writeSprite(0,0,CH8);
   delay(500);
   m.writeSprite(0,0,CH9);
   delay(400);
   m.writeSprite(0,0,CH10);
   delay(200);
   m.writeSprite(0,0,CHx1);
   delay(200);
   m.setIntensity(1);
   m.writeSprite(0,0,CHx2);
   delay(200);
   m.writeSprite(0,0,CHx1);
   delay(200);
   m.writeSprite(0,0,CHx2);
   delay(200);
   m.writeSprite(0,0,CHx1);
   delay(200);
   m.setIntensity(8);
   m.writeSprite(0,0,CHl2);
   delay(100);
   m.writeSprite(0,0,CHl1);
   delay(500);
   w=1;
  }
  else if(w==1){
    for(int j=0; j<=1; j++){
   printStringWithShift(msg, 100);
   //delay(200);
    }
    w=2;
  }
  else if(w==2){
    for(int n=0; n<=10; n++){
    m.writeSprite(0,0,C1);
    delay(200);
    m.writeSprite(0,0,C2);
    delay(200);
    }
    w=0;
  }
}

void printStringWithShift(char* s, int shift_speed)
{
  while (*s != 0)
  {
    printCharWithShift(*s, shift_speed);
    s++;
  }
}
 
void printCharWithShift(char c, int shift_speed)
{
  if (c < 32) return; 
  c -= 32;
  memcpy_P(buffer, CH + 7*c, 7);
  m.writeSprite(32, 0, buffer);
  if(s==0){
  m.setIntensity(s);
  s=10;
  }else if(s==10){
  m.setIntensity(s);
  s=0;
  }
  m.setColumn(32 + buffer[0], 0);
  for (int i=0; i<buffer[0]+1; i++) 
  {
    delay(shift_speed);
    m.shiftLeft(false, false);
  }
}
